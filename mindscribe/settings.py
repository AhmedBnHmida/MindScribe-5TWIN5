"""
Django settings for mindscribe project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-3b$ez+(&-^t&^%xtji9axf!8jb#k$&00jqiy2-d)3((h1_7p4)')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    # Custom apps
    'users',
    'journal',
    'analysis',
    'dashboard',
    'recommendations.apps.RecommendationsConfig',
    'communication',
    'module2_analysis.apps.Module2AnalysisConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mindscribe.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mindscribe.wsgi.application'



# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# MongoDB Atlas config with Djongo (use environment variables)
MONGODB_URI = os.environ.get('MONGODB_URI', '')
MONGODB_DB = os.environ.get('MONGODB_DB', default='mindscribe_db')

if MONGODB_URI:
    DATABASES = {
        'default': {
            'ENGINE': 'djongo',
            'NAME': MONGODB_DB,
            'CLIENT': {
                'host': MONGODB_URI,
            }
        }
    }
else:
    # Fallback local dev (no secrets in repo). You can set MONGODB_URI instead.
    DATABASES = {
        'default': {
            'ENGINE': 'djongo',
            'NAME': MONGODB_DB,
            'CLIENT': {
                'host': config('MONGODB_HOST', default=''),
                'username': config('MONGODB_USERNAME', default=''),
                'password': config('MONGODB_PASSWORD', default=''),
            }
        }
    }

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'users.CustomUser'

# SQLite backup (for development if MongoDB has issues)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'users.CustomUser'

LOGIN_URL = '/login/'  # ðŸ‘ˆ AJOUTE/MODIFIE CETTE LIGNE
LOGIN_REDIRECT_URL = '/dashboard/'  # ðŸ‘ˆ MODIFIE POUR REDIRIGER VERS TON DASHBOARD
LOGOUT_REDIRECT_URL = '/'
# Email backend (for development)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'



# OpenRouter Configuration
# ClÃ© API OpenRouter de dÃ©monstration (pour tests)
OPENROUTER_API_KEY = os.environ.get('OPENROUTER_API_KEY', '')
OPENROUTER_BASE_URL = "https://openrouter.ai/api/v1"

# ðŸ†“ MODÃˆLES 100% GRATUITS - TESTÃ‰S ET FONCTIONNELS
OPENROUTER_MODEL = "meta-llama/llama-3.1-8b-instruct"  # ðŸŽ¯ ModÃ¨le gratuit de Meta

OPENROUTER_MODELS = {
    'gemini': "google/gemini-pro",                    # ðŸ¥‡ Usually reliable
    'claude': "anthropic/claude-3-haiku",            # ðŸ¥ˆ Good free tier
    'llama': "meta-llama/llama-3.1-8b-instruct",     # ðŸ¥‰ Remove :free suffix
}

# Configuration IA optimisÃ©e
AI_CONFIG = {
    'max_tokens': 800,      # RÃ©duit pour les modÃ¨les gratuits
    'temperature': 0.7,
    'timeout': 60,          # AugmentÃ© pour les modÃ¨les lents
}

DEBUG = True