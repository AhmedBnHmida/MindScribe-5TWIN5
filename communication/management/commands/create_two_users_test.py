from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.utils import timezone
from datetime import timedelta
from communication.models import SuggestionConnexion

User = get_user_model()

class Command(BaseCommand):
    help = 'Cr√©e deux utilisateurs de test pour tester les suggestions de connexion'

    def handle(self, *args, **options):
        self.stdout.write("üöÄ Cr√©ation de deux utilisateurs pour tester les suggestions...")
        
        # Cr√©er le premier utilisateur
        user1 = self._create_user(
            email='alice@test.com',
            username='alice_test',
            first_name='Alice',
            last_name='Test',
            profession='D√©veloppeuse',
            passions=['programmation', 'lecture', 'voyage'],
            objectifs_personnels=['Apprendre Django', 'Voyager plus']
        )
        
        # Cr√©er le deuxi√®me utilisateur
        user2 = self._create_user(
            email='bob@test.com', 
            username='bob_test',
            first_name='Bob',
            last_name='Test',
            profession='Designer',
            passions=['design', 'art', 'musique'],
            objectifs_personnels=['Am√©liorer le design', 'Apprendre la musique']
        )
        
        # Cr√©er des journaux de test pour les utilisateurs
        self._create_test_journals(user1, user2)
        
        # Cr√©er des suggestions entre les deux utilisateurs
        self._create_suggestions(user1, user2)
        
        self.stdout.write(self.style.SUCCESS('üéâ Utilisateurs de test cr√©√©s avec succ√®s!'))
        self.stdout.write(f"üë§ Alice: {user1.email} / motdepasse: testpass123")
        self.stdout.write(f"üë§ Bob: {user2.email} / motdepasse: testpass123")
        self.stdout.write("\nüìù Instructions de test:")
        self.stdout.write("1. Connectez-vous avec Alice")
        self.stdout.write("2. Allez sur /communication/suggestions/")
        self.stdout.write("3. Acceptez la suggestion de Bob")
        self.stdout.write("4. Connectez-vous avec Bob")
        self.stdout.write("5. V√©rifiez que la connexion est accept√©e")

    def _create_user(self, email, username, first_name, last_name, profession, passions, objectifs_personnels):
        """Cr√©e un utilisateur de test"""
        try:
            user, created = User.objects.get_or_create(
                email=email,
                defaults={
                    'username': username,
                    'first_name': first_name,
                    'last_name': last_name,
                    'is_active': True,
                    'is_staff': False,
                    'role': 'user',
                    'langue': 'fr',
                    'age': 28,
                    'profession': profession,
                    'passions': passions,
                    'objectifs_personnels': objectifs_personnels,
                    'humeur_generale': 'heureux',
                    'niveau_stress': 2,
                    'qualite_sommeil': 'bon',
                    'frequence_ecriture_souhaitee': 'soir',
                    'moment_prefere_ecriture': 'soir',
                    'niveau_activite_physique': 'modere',
                    'habitudes_alimentaires': 'equilibree',
                    'heures_sommeil_par_nuit': 8.0,
                    'centres_interet': ['technologie', 'd√©veloppement personnel'],
                    'preferences_suivi': {'notifications': True, 'rapports_automatiques': True}
                }
            )
            
            if created:
                user.set_password('testpass123')
                user.save()
                self.stdout.write(self.style.SUCCESS(f'‚úÖ Utilisateur {username} cr√©√©'))
            else:
                self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è Utilisateur {username} existe d√©j√†'))
            
            return user
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur cr√©ation utilisateur {username}: {e}'))
            return None

    def _create_suggestions(self, user1, user2):
        """Cr√©e des suggestions de connexion entre les deux utilisateurs"""
        try:
            # Suggestion de Alice vers Bob (propos√©e)
            suggestion1, created1 = SuggestionConnexion.objects.get_or_create(
                utilisateur_source=user1,
                utilisateur_cible=user2,
                defaults={
                    'score_similarite': 0.75,
                    'type_suggestion': 'objectif_similaire',
                    'statut': 'proposee',
                    'date_suggestion': timezone.now() - timedelta(days=1)
                }
            )
            
            if created1:
                self.stdout.write(self.style.SUCCESS('‚úÖ Suggestion Alice ‚Üí Bob cr√©√©e (propos√©e)'))
            else:
                self.stdout.write(self.style.WARNING('‚ö†Ô∏è Suggestion Alice ‚Üí Bob existe d√©j√†'))
            
            # Suggestion de Bob vers Alice (propos√©e)
            suggestion2, created2 = SuggestionConnexion.objects.get_or_create(
                utilisateur_source=user2,
                utilisateur_cible=user1,
                defaults={
                    'score_similarite': 0.68,
                    'type_suggestion': 'interet_commun',
                    'statut': 'proposee',
                    'date_suggestion': timezone.now() - timedelta(hours=12)
                }
            )
            
            if created2:
                self.stdout.write(self.style.SUCCESS('‚úÖ Suggestion Bob ‚Üí Alice cr√©√©e (propos√©e)'))
            else:
                self.stdout.write(self.style.WARNING('‚ö†Ô∏è Suggestion Bob ‚Üí Alice existe d√©j√†'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur cr√©ation suggestions: {e}'))

    def _create_test_journals(self, user1, user2):
        """Cr√©e des journaux de test pour les utilisateurs"""
        try:
            from journal.models import Journal
            
            # Journaux pour Alice
            alice_journals = [
                "Aujourd'hui j'ai termin√© mon projet Django. Je me sens tr√®s satisfaite du r√©sultat et j'ai appris beaucoup de nouvelles choses sur les mod√®les et les vues.",
                "Journ√©e productive au travail. J'ai r√©solu plusieurs bugs complexes et l'√©quipe √©tait contente de mes contributions. Je me sens motiv√©e pour continuer.",
                "Super journ√©e ! J'ai fait du sport le matin, puis j'ai lu un livre fascinant sur la programmation. L'√©quilibre travail-loisirs est important pour moi.",
                "R√©flexion du jour : j'ai remarqu√© que ma productivit√© est meilleure quand je commence par une petite marche. Je vais essayer de maintenir cette routine.",
                "Un peu stress√©e aujourd'hui avec plusieurs deadlines, mais j'ai r√©ussi √† tout g√©rer. Une bonne nuit de sommeil m'aidera √† r√©cup√©rer."
            ]
            
            # Journaux pour Bob
            bob_journals = [
                "Nouveau projet de design en cours. J'adore cr√©er des interfaces utilisateur intuitives et belles. L'art et la technologie se rencontrent parfaitement.",
                "Journ√©e cr√©ative ! J'ai travaill√© sur une nouvelle palette de couleurs et j'ai √©t√© inspir√© par l'art moderne. La cr√©ativit√© coule naturellement aujourd'hui.",
                "√âcoute de musique classique en travaillant. √áa m'aide √† me concentrer et √† √™tre plus cr√©atif. La musique est vraiment une source d'inspiration.",
                "R√©flexion sur mon parcours de designer. J'ai parcouru un long chemin et je suis fier de mes r√©alisations. L'apprentissage continu est la cl√©.",
                "Petit coup de blues aujourd'hui, mais c'est normal. Demain sera meilleur. L'important c'est de garder une attitude positive."
            ]
            
            # Cr√©er les journaux pour Alice
            for i, content in enumerate(alice_journals):
                Journal.objects.create(
                    utilisateur=user1,
                    contenu_texte=content,
                    type_entree='texte',
                    categorie='r√©flexion',
                    date_creation=timezone.now() - timedelta(days=i+1)
                )
            
            # Cr√©er les journaux pour Bob
            for i, content in enumerate(bob_journals):
                Journal.objects.create(
                    utilisateur=user2,
                    contenu_texte=content,
                    type_entree='texte',
                    categorie='r√©flexion',
                    date_creation=timezone.now() - timedelta(days=i+1)
                )
            
            self.stdout.write(self.style.SUCCESS('‚úÖ Journaux de test cr√©√©s pour Alice et Bob'))
            
        except ImportError:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è Mod√®le Journal non disponible'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur cr√©ation journaux: {e}'))
