from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.utils import timezone
from datetime import datetime, timedelta
import uuid
import json

# Import des mod√®les avec gestion d'erreur
try:
    from dashboard.models import Statistique
except ImportError:
    print("‚ö†Ô∏è  Mod√®le Statistique non trouv√© dans dashboard")

try:
    from journal.models import Journal
except ImportError:
    print("‚ö†Ô∏è  Mod√®le Journal non trouv√©")

try:
    from analysis.models import AnalyseIA
except ImportError:
    print("‚ö†Ô∏è  Mod√®le AnalyseIA non trouv√©")

try:
    from recommendations.models import Recommandation, Objectif
except ImportError:
    print("‚ö†Ô∏è  Mod√®les Recommandation/Objectif non trouv√©s")

from communication.models import RapportPDF, HistoriqueGeneration

User = get_user_model()

class Command(BaseCommand):
    help = 'Cr√©e des donn√©es de test compl√®tes pour les rapports PDF'

    def handle(self, *args, **options):
        self.stdout.write("üöÄ D√©marrage de la cr√©ation des donn√©es de test...")
        
        # Cr√©er ou r√©cup√©rer l'utilisateur de test
        user = self._create_test_user()
        
        if not user:
            self.stdout.write(self.style.ERROR('‚ùå √âchec de la cr√©ation de l\'utilisateur de test'))
            return
        
        # Cr√©er des statistiques de test
        statistique = self._create_test_statistics(user)
        
        # Cr√©er des journaux et analyses de test (si les apps existent)
        self._create_test_journals_and_analyses(user, statistique)
        
        # Cr√©er des recommandations de test (si l'app existe)
        self._create_test_recommendations(user, statistique)
        
        # Cr√©er un rapport PDF de test
        rapport = self._create_test_pdf_report(user, statistique)
        
        self.stdout.write(self.style.SUCCESS('üéâ Donn√©es de test cr√©√©es avec succ√®s!'))
        self.stdout.write(f"üë§ Utilisateur: {user.email}")
        if statistique:
            self.stdout.write(f"üìä Statistiques: {statistique.periode}")
        if rapport:
            self.stdout.write(f"üìÑ Rapport: {rapport.titre}")

    def _create_test_user(self):
        """Cr√©e un utilisateur de test avec les champs exacts de CustomUser"""
        try:
            user, created = User.objects.get_or_create(
                email='test_pdf@mindscribe.com',
                defaults={
                    'username': 'testuser_pdf',
                    'first_name': 'Test',
                    'last_name': 'PDF',
                    'is_active': True,
                    'is_staff': False,
                    'role': 'user',
                    'phone_number': '+1234567890',
                    'langue': 'fr',
                    'age': 30,
                    'adresse': {'code_postal': '75001', 'ville': 'Paris', 'pays': 'France'},
                    'etat_civil': 'C√©libataire',
                    'sexe': 'M',
                    'status_professionnel': 'travailleur',
                    'casanier': False,
                    'sociable': True,
                    'profession': 'D√©veloppeur',
                    'passions': ['programmation', 'lecture', 'sport'],
                    'objectifs_personnels': ['Apprendre Django', 'Am√©liorer la productivit√©'],
                    'routine_quotidienne': {'matinale': True, 'reguliere': True},
                    'humeur_generale': 'heureux',
                    'niveau_stress': 3,
                    'qualite_sommeil': 'bon',
                    'frequence_ecriture_souhaitee': 'soir',
                    'moment_prefere_ecriture': 'soir',
                    'niveau_activite_physique': 'modere',
                    'habitudes_alimentaires': 'equilibree',
                    'heures_sommeil_par_nuit': 7.5,
                    'centres_interet': ['technologie', 'psychologie', 'd√©veloppement personnel'],
                    'preferences_suivi': {'notifications': True, 'rapports_automatiques': True}
                }
            )
            
            if created:
                user.set_password('testpass123')
                user.save()
                self.stdout.write(self.style.SUCCESS('‚úÖ Utilisateur de test PDF cr√©√©'))
            else:
                self.stdout.write(self.style.WARNING('‚ö†Ô∏è Utilisateur de test PDF existe d√©j√†'))
            
            return user
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur cr√©ation utilisateur: {e}'))
            return None

    def _create_test_statistics(self, user):
        """Cr√©e des statistiques de test r√©alistes"""
        try:
            from dashboard.models import Statistique
            
            # Cr√©er des statistiques pour diff√©rents mois
            months_data = [
                {
                    'periode': 'Octobre 2025',
                    'frequence_ecriture': 18,
                    'score_humeur': 7.8,
                    'themes_dominants': ['productivit√©', 'bien-√™tre', 'sant√© mentale', 'd√©veloppement personnel'],
                    'bilan_mensuel': 'Mois tr√®s productif avec une am√©lioration notable de l\'humeur g√©n√©rale. Bon √©quilibre travail-vie personnelle.'
                },
                {
                    'periode': 'Septembre 2025', 
                    'frequence_ecriture': 12,
                    'score_humeur': 6.2,
                    'themes_dominants': ['stress', 'organisation', 'repos', 'sport'],
                    'bilan_mensuel': 'Mois charg√© avec quelques p√©riodes de stress. Bonne prise de conscience des besoins en repos.'
                },
                {
                    'periode': 'Ao√ªt 2025',
                    'frequence_ecriture': 22,
                    'score_humeur': 8.5,
                    'themes_dominants': ['vacances', 'cr√©ativit√©', 'famille', 'loisirs'],
                    'bilan_mensuel': 'Excellent mois de vacances avec beaucoup de cr√©ativit√© et de moments en famille.'
                }
            ]
            
            created_stats = []
            for month_data in months_data:
                statistique, created = Statistique.objects.get_or_create(
                    utilisateur=user,
                    periode=month_data['periode'],
                    defaults=month_data
                )
                if created:
                    created_stats.append(statistique)
                    self.stdout.write(self.style.SUCCESS(f"‚úÖ Statistiques {month_data['periode']} cr√©√©es"))
                else:
                    self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è Statistiques {month_data['periode']} existent d√©j√†"))
            
            return created_stats[0] if created_stats else Statistique.objects.filter(utilisateur=user).first()
            
        except ImportError:
            self.stdout.write(self.style.ERROR('‚ùå Mod√®le Statistique non disponible'))
            return None
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur cr√©ation statistiques: {e}'))
            return None

    def _create_test_journals_and_analyses(self, user, statistique):
        """Cr√©e des journaux et analyses de test"""
        try:
            from journal.models import Journal
            from analysis.models import AnalyseIA
            
            # Donn√©es de test pour les journaux
            journal_entries = [
                {
                    'contenu': "Aujourd'hui, j'ai termin√© mon projet MindScribe. Je me sens accompli et motiv√© pour la suite. La session de codage √©tait tr√®s productive. J'ai r√©solu plusieurs probl√®mes complexes et j'ai h√¢te de voir les utilisateurs b√©n√©ficier de cette application.",
                    'ton': 'positif',
                    'mots_cles': ['projet', 'accomplissement', 'motivation', 'productivit√©', 'codage'],
                    'themes': ['travail', 'd√©veloppement personnel', 'succ√®s', 'technologie']
                },
                {
                    'contenu': "Journ√©e un peu stressante au travail avec plusieurs deadlines. J'ai r√©ussi √† tout g√©rer mais je me sens fatigu√©. Besoin de me reposer ce weekend. J'ai quand m√™me pris le temps de faire une petite promenade pour me d√©tendre.",
                    'ton': 'neutre', 
                    'mots_cles': ['stress', 'travail', 'fatigue', 'repos', 'd√©tente'],
                    'themes': ['travail', 'sant√©', '√©quilibre', 'bien-√™tre']
                },
                {
                    'contenu': "Super journ√©e ! J'ai fait du sport le matin, rencontr√© des amis pour le d√©jeuner et pass√© une soir√©e tranquille √† lire. Parfait √©quilibre entre activit√© sociale et temps personnel. J'ai lu un livre fascinant sur la psychologie cognitive.",
                    'ton': 'positif',
                    'mots_cles': ['sport', 'amis', 'lecture', '√©quilibre', 'social'],
                    'themes': ['sant√©', 'social', 'loisirs', 'd√©veloppement personnel']
                },
                {
                    'contenu': "R√©flexion du jour : j'ai remarqu√© que ma productivit√© est meilleure quand je commence la journ√©e par de l'exercice. Je vais essayer de maintenir cette routine. Aujourd'hui j'ai aussi m√©dit√© 10 minutes, c'√©tait tr√®s b√©n√©fique.",
                    'ton': 'positif',
                    'mots_cles': ['r√©flexion', 'productivit√©', 'routine', 'exercice', 'm√©ditation'],
                    'themes': ['routine', 'productivit√©', 'bien-√™tre', 'd√©veloppement personnel']
                },
                {
                    'contenu': "Un peu de nostalgie aujourd'hui en retrouvant de vieilles photos. √áa m'a fait r√©fl√©chir √† mon parcours et √† tout le chemin parcouru. Je suis reconnaissant pour les exp√©riences qui m'ont fa√ßonn√©.",
                    'ton': 'neutre',
                    'mots_cles': ['nostalgie', 'r√©flexion', 'parcours', 'reconnaissance', 'm√©moire'],
                    'themes': ['r√©flexion', '√©motions', 'd√©veloppement personnel']
                }
            ]
            
            created_count = 0
            for i, entry_data in enumerate(journal_entries):
                # Cr√©er le journal
                journal = Journal.objects.create(
                    utilisateur=user,
                    contenu_texte=entry_data['contenu'],
                    type_entree='texte',
                    categorie='r√©flexion',
                    date_creation=timezone.now() - timedelta(days=(len(journal_entries) - i))
                )
                
                # Cr√©er l'analyse IA associ√©e
                analyse = AnalyseIA.objects.create(
                    journal=journal,
                    ton_general=entry_data['ton'],
                    mots_cles=entry_data['mots_cles'],
                    themes_detectes=entry_data['themes'],
                    resume_journee=f"Journ√©e caract√©ris√©e par {entry_data['themes'][0]} avec un ton {entry_data['ton']}. {entry_data['contenu'][:80]}..."
                )
                
                # Lier l'analyse aux statistiques si possible
                if statistique and hasattr(statistique, 'analyses_liees'):
                    statistique.analyses_liees.add(analyse)
                
                created_count += 1
            
            self.stdout.write(self.style.SUCCESS(f'‚úÖ {created_count} journaux et analyses cr√©√©s'))
            
        except ImportError as e:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è Journal/Analysis non disponibles: {e}'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur cr√©ation journaux: {e}'))

    def _create_test_recommendations(self, user, statistique):
        """Cr√©e des recommandations de test"""
        try:
            from recommendations.models import Recommandation, Objectif
            
            # Cr√©er des recommandations
            recommendations = [
                {
                    'type': 'bien_etre',
                    'contenu': 'Pratiquez 10 minutes de m√©ditation par jour pour r√©duire le stress et am√©liorer la concentration. Votre humeur g√©n√©rale en b√©n√©ficiera.',
                    'statut': 'nouvelle'
                },
                {
                    'type': 'productivite', 
                    'contenu': 'Essayez la technique Pomodoro (25min travail / 5min pause) pour booster votre productivit√©. Parfait pour vos sessions de codage.',
                    'statut': 'suivie'
                },
                {
                    'type': 'sommeil',
                    'contenu': 'Maintenez une routine de sommeil r√©guli√®re avec 7-8 heures par nuit pour une meilleure r√©cup√©ration. Votre qualit√© de sommeil est d√©j√† bonne, continuez !',
                    'statut': 'nouvelle'
                },
                {
                    'type': 'nutrition',
                    'contenu': 'Int√©grez plus de fruits et l√©gumes dans votre alimentation. Votre habitude √©quilibr√©e est excellente, quelques ajustements pourraient optimiser votre √©nergie.',
                    'statut': 'nouvelle'
                }
            ]
            
            for rec_data in recommendations:
                Recommandation.objects.create(
                    utilisateur=user,
                    statistique=statistique,
                    type=rec_data['type'],
                    contenu=rec_data['contenu'],
                    statut=rec_data['statut'],
                    date_emission=timezone.now() - timedelta(days=10)
                )
            
            # Cr√©er des objectifs
            objectifs = [
                {
                    'nom': '√âcrire 3 fois par semaine',
                    'description': 'Maintenir une r√©gularit√© dans l\'√©criture du journal pour mieux suivre mon √©volution personnelle',
                    'progres': 75.0,
                    'date_debut': timezone.now() - timedelta(days=30),
                    'date_fin': timezone.now() + timedelta(days=60)
                },
                {
                    'nom': 'Apprendre Django avanc√©',
                    'description': 'Ma√Ætriser les concepts avanc√©s de Django pour am√©liorer MindScribe',
                    'progres': 40.0,
                    'date_debut': timezone.now() - timedelta(days=45),
                    'date_fin': timezone.now() + timedelta(days=90)
                },
                {
                    'nom': 'Am√©liorer la routine matinale',
                    'description': 'Int√©grer m√©ditation et exercice dans ma routine du matin',
                    'progres': 60.0,
                    'date_debut': timezone.now() - timedelta(days=15),
                    'date_fin': timezone.now() + timedelta(days=45)
                }
            ]
            
            for obj_data in objectifs:
                Objectif.objects.create(
                    utilisateur=user,
                    nom=obj_data['nom'],
                    description=obj_data['description'],
                    progres=obj_data['progres'],
                    date_debut=obj_data['date_debut'],
                    date_fin=obj_data['date_fin']
                )
            
            self.stdout.write(self.style.SUCCESS('‚úÖ Recommandations et objectifs cr√©√©s'))
            
        except ImportError:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è Recommendations non disponibles'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur cr√©ation recommandations: {e}'))

    def _create_test_pdf_report(self, user, statistique):
        """Cr√©e un rapport PDF de test avec g√©n√©ration r√©elle du PDF"""
        if not statistique:
            self.stdout.write(self.style.ERROR('‚ùå Impossible de cr√©er un rapport sans statistiques'))
            return None
        
        try:
            # V√©rifier si un rapport existe d√©j√† pour ces statistiques
            existing_rapport = RapportPDF.objects.filter(statistique=statistique).first()
            if existing_rapport:
                self.stdout.write(self.style.WARNING('‚ö†Ô∏è Rapport PDF existe d√©j√†'))
                return existing_rapport
            
            # Cr√©er un nouveau rapport avec statut "en_cours"
            rapport = RapportPDF.objects.create(
                utilisateur=user,
                statistique=statistique,
                titre=f"Rapport D√©taill√© {statistique.periode}",
                mois=statistique.periode,
                description=f"Rapport de test complet pour {statistique.periode} avec toutes les sections activ√©es.",
                format_rapport='complet',
                template_rapport='moderne',
                couleur_principale='#3498db',
                couleur_secondaire='#2c3e50',
                inclure_statistiques=True,
                inclure_graphiques=True,
                inclure_analyse_ia=True,
                inclure_journaux=True,
                inclure_objectifs=True,
                inclure_recommandations=True,
                statut='en_cours'  # ‚úÖ Change to 'en_cours' to trigger generation
            )
            
            # ‚úÖ CRITICAL: Actually generate the PDF file
            self._generate_pdf_for_report(rapport)
            
            self.stdout.write(self.style.SUCCESS('‚úÖ Rapport PDF de test cr√©√© avec fichier PDF g√©n√©r√©'))
            return rapport
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur cr√©ation rapport PDF: {e}'))
            return None

    def _generate_pdf_for_report(self, rapport):
        """Generate actual PDF file for the report"""
        try:
            from django.core.files.base import ContentFile
            from communication.services.pdf_generator import PDFGenerationService
            
            self.stdout.write("üîÑ G√©n√©ration du fichier PDF...")
            
            # Create generation history
            historique = HistoriqueGeneration.objects.create(
                rapport=rapport,
                statut='debute'
            )
            
            # Generate PDF using your service
            pdf_service = PDFGenerationService()
            pdf_content = pdf_service.generate_complete_report(rapport)
            
            # Save PDF to FileField
            filename = rapport.generer_nom_fichier()
            rapport.contenu_pdf.save(filename, ContentFile(pdf_content))
            
            # Update status to completed
            rapport.statut = 'termine'
            rapport.save()
            
            # Update history
            historique.statut = 'reussi'
            historique.date_fin = timezone.now()
            historique.save()
            
            self.stdout.write(self.style.SUCCESS(f'‚úÖ PDF g√©n√©r√©: {filename}'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur g√©n√©ration PDF: {e}'))
            
            # Update status to error
            rapport.statut = 'erreur'
            rapport.save()
            
            if 'historique' in locals():
                historique.statut = 'echoue'
                historique.message_erreur = str(e)
                historique.date_fin = timezone.now()
                historique.save()