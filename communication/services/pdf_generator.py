import os
from io import BytesIO
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, ListFlowable, ListItem
from reportlab.lib.units import inch
from django.conf import settings
import logging

logger = logging.getLogger(__name__)

class PDFGenerationService:
    """Service for generating customizable PDF reports"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Setup custom styles for different templates"""
        self.styles.add(ParagraphStyle(
            name='ModernTitle',
            parent=self.styles['Heading1'],
            fontSize=20,
            textColor=colors.HexColor('#2C3E50'),
            spaceAfter=30,
            alignment=1,
            fontName='Helvetica-Bold'
        ))
        
        self.styles.add(ParagraphStyle(
            name='ModernSubtitle',
            parent=self.styles['Heading2'],
            fontSize=14,
            textColor=colors.HexColor('#34495E'),
            spaceAfter=15,
            fontName='Helvetica-Bold'
        ))

        self.styles.add(ParagraphStyle(
            name='StatsValue',
            parent=self.styles['Normal'],
            fontSize=12,
            textColor=colors.HexColor('#2C3E50'),
            fontName='Helvetica-Bold'
        ))

    def _get_template_config(self, template_name):
        """Get configuration for different templates"""
        templates = {
            'moderne': {
                'title_style': 'ModernTitle',
                'subtitle_style': 'ModernSubtitle',
                'primary_color': '#3498db',
                'secondary_color': '#2C3E50',
            },
            'classique': {
                'title_style': 'Heading1',
                'subtitle_style': 'Heading2',
                'primary_color': '#000000',
                'secondary_color': '#333333',
            },
            'minimaliste': {
                'title_style': 'Heading1',
                'subtitle_style': 'Heading2',
                'primary_color': '#2C3E50',
                'secondary_color': '#7F8C8D',
            }
        }
        return templates.get(template_name, templates['moderne'])

    def _generate_statistics_section(self, rapport, config):
        """Generate comprehensive statistics section - ONLY if enabled"""
        elements = []
        
        # ‚úÖ CHECK IF STATISTICS ARE ENABLED
        if rapport.inclure_statistiques and hasattr(rapport, 'statistique'):
            statistique = rapport.statistique
            
            elements.append(Paragraph("üìä Statistiques D√©taill√©es", self.styles[config['subtitle_style']]))
            elements.append(Spacer(1, 12))

            # Tableau des statistiques principales
            stats_data = [
                ["üìà M√©trique", "üî¢ Valeur", "üí° Analyse"],
                ["Fr√©quence d'√©criture", f"{statistique.frequence_ecriture} entr√©es", self._get_frequency_analysis(statistique.frequence_ecriture)],
                ["Score d'humeur moyen", f"{statistique.score_humeur:.2f}/10", self._get_mood_analysis(statistique.score_humeur)],
                ["Consistance", f"{self._calculate_consistency(statistique):.1f}%", "R√©gularit√© des √©crits"],
                ["Productivit√©", f"{self._calculate_productivity(statistique):.1f}/10", "Niveau d'activit√©"],
            ]
            
            stats_table = Table(stats_data, colWidths=[150, 120, 180])
            stats_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor(config['primary_color'])),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#FFFFFF')),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#DEE2E6')),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#F8F9FA')])
            ]))
            elements.append(stats_table)
            elements.append(Spacer(1, 20))

            # Th√®mes dominants
            if statistique.themes_dominants:
                elements.append(Paragraph("üéØ Th√®mes Dominants", self.styles[config['subtitle_style']]))
                elements.append(Spacer(1, 8))
                
                themes_list = []
                for theme in statistique.themes_dominants[:5]:
                    themes_list.append(ListItem(Paragraph(theme, self.styles['Normal'])))
                
                elements.append(ListFlowable(themes_list, bulletType='bullet'))
                elements.append(Spacer(1, 15))

            # Bilan mensuel
            if statistique.bilan_mensuel:
                elements.append(Paragraph("üìù Bilan Mensuel", self.styles[config['subtitle_style']]))
                elements.append(Spacer(1, 8))
                elements.append(Paragraph(statistique.bilan_mensuel, self.styles['Normal']))
                elements.append(Spacer(1, 20))
        else:
            # Show message if statistics are disabled
            elements.append(Paragraph("üìä Statistiques", self.styles[config['subtitle_style']]))
            elements.append(Paragraph("<i>Les statistiques ne sont pas incluses dans ce rapport</i>", self.styles['Italic']))
            elements.append(Spacer(1, 20))

        return elements

    def _generate_graphiques_section(self, rapport, config):
        """Generate graphs section - ONLY if enabled"""
        elements = []
        
        # ‚úÖ CHECK IF GRAPHS ARE ENABLED
        if rapport.inclure_graphiques:
            elements.append(Paragraph("üìà Graphiques et Visualisations", self.styles[config['subtitle_style']]))
            elements.append(Spacer(1, 12))
            
            # Placeholder for graphs (you can add actual charts here)
            graph_data = [
                ["√âvolution de l'humeur", "üìä Graphique en courbes - Humeur moyenne par semaine"],
                ["Fr√©quence d'√©criture", "üìä Graphique en barres - Entr√©es par jour"],
                ["Th√®mes populaires", "üìä Graphique en secteurs - R√©partition des th√®mes"],
                ["Progression des objectifs", "üìä Graphique de progression - Avancement mensuel"],
            ]
            
            graph_table = Table(graph_data, colWidths=[200, 250])
            graph_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor(config['secondary_color'])),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#F8F9FA')),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#DEE2E6'))
            ]))
            elements.append(graph_table)
            elements.append(Spacer(1, 20))
        else:
            elements.append(Paragraph("üìà Graphiques", self.styles[config['subtitle_style']]))
            elements.append(Paragraph("<i>Les graphiques ne sont pas inclus dans ce rapport</i>", self.styles['Italic']))
            elements.append(Spacer(1, 20))

        return elements

    def _generate_analyse_ia_section(self, rapport, config):
        """Generate AI analysis section - ONLY if enabled"""
        elements = []
        
        # ‚úÖ CHECK IF AI ANALYSIS IS ENABLED
        if rapport.inclure_analyse_ia:
            elements.append(Paragraph("ü§ñ Analyse IA Avanc√©e", self.styles[config['subtitle_style']]))
            elements.append(Spacer(1, 12))
            
            # AI insights based on statistics
            if hasattr(rapport, 'statistique'):
                statistique = rapport.statistique
                
                ai_insights = []
                
                # Analyse de fr√©quence
                if statistique.frequence_ecriture >= 20:
                    ai_insights.append("üéØ Excellente r√©gularit√© d'√©criture! Votre engagement est remarquable")
                elif statistique.frequence_ecriture >= 10:
                    ai_insights.append("üìù Bonne fr√©quence d'√©criture, continuez sur cette lanc√©e")
                else:
                    ai_insights.append("üí° Essayez d'√©crire plus r√©guli√®rement pour de meilleures analyses")
                
                # Analyse d'humeur
                if statistique.score_humeur >= 8:
                    ai_insights.append("üòä Humeur excellente! Cet √©tat d'esprit positif est tr√®s b√©n√©fique")
                elif statistique.score_humeur >= 6:
                    ai_insights.append("üôÇ Humeur stable et positive, bon √©quilibre g√©n√©ral")
                elif statistique.score_humeur >= 4:
                    ai_insights.append("ü§î P√©riode de r√©flexion, id√©ale pour l'introspection")
                else:
                    ai_insights.append("üåßÔ∏è Moment plus difficile, pensez √† pratiquer l'auto-compassion")
                
                # Analyse des th√®mes
                if statistique.themes_dominants:
                    if len(statistique.themes_dominants) >= 4:
                        ai_insights.append("üåà Excellente vari√©t√© th√©matique dans vos √©crits")
                    else:
                        ai_insights.append("üé® Vos √©crits se concentrent sur quelques th√®mes principaux")
                
                # Recommandations IA suppl√©mentaires
                ai_insights.append("üîç L'IA d√©tecte des patterns coh√©rents dans votre routine d'√©criture")
                ai_insights.append("üí≠ Vos r√©flexions montrent une bonne profondeur d'analyse")
                
                insights_list = []
                for insight in ai_insights:
                    insights_list.append(ListItem(Paragraph(insight, self.styles['Normal'])))
                
                elements.append(ListFlowable(insights_list, bulletType='bullet'))
                elements.append(Spacer(1, 20))
        else:
            elements.append(Paragraph("ü§ñ Analyse IA", self.styles[config['subtitle_style']]))
            elements.append(Paragraph("<i>L'analyse IA n'est pas incluse dans ce rapport</i>", self.styles['Italic']))
            elements.append(Spacer(1, 20))

        return elements

    def _generate_journaux_section(self, rapport, config):
        """Generate journal entries section - ONLY if enabled"""
        elements = []
        
        # ‚úÖ CHECK IF JOURNALS ARE ENABLED
        if rapport.inclure_journaux:
            elements.append(Paragraph("üìñ Extraits de Journal", self.styles[config['subtitle_style']]))
            elements.append(Spacer(1, 12))
            
            # Sample journal entries (in a real app, you would fetch actual entries)
            journal_entries = [
                "üåÖ **Matin√©e productive** : Aujourd'hui j'ai commenc√© par une s√©ance de m√©ditation suivie d'une planification claire de ma journ√©e. Je me sens concentr√© et motiv√©.",
                "üíº **R√©flexion professionnelle** : J'ai r√©alis√© l'importance de l'√©quilibre travail-vie personnelle. Prendre du temps pour soi n'est pas du temps perdu.",
                "üåô **Soir√©e r√©flexive** : En repensant √† ma journ√©e, je me rends compte que les petites victoires comptent autant que les grands succ√®s."
            ]
            
            journal_list = []
            for i, entry in enumerate(journal_entries[:3], 1):
                journal_list.append(ListItem(Paragraph(f"<b>Entr√©e #{i}:</b> {entry}", self.styles['Normal'])))
            
            elements.append(ListFlowable(journal_list, bulletType='bullet'))
            elements.append(Spacer(1, 20))
            
            # Note sur la confidentialit√©
            elements.append(Paragraph("<i><small>Note: Ces extraits sont des exemples. Dans l'application r√©elle, vos vraies entr√©es de journal seraient affich√©es ici.</small></i>", self.styles['Italic']))
            elements.append(Spacer(1, 20))
        else:
            elements.append(Paragraph("üìñ Journal", self.styles[config['subtitle_style']]))
            elements.append(Paragraph("<i>Les extraits de journal ne sont pas inclus dans ce rapport</i>", self.styles['Italic']))
            elements.append(Spacer(1, 20))

        return elements

    def _generate_objectifs_section(self, rapport, config):
        """Generate goals section - ONLY if enabled"""
        elements = []
        
        # ‚úÖ CHECK IF GOALS ARE ENABLED
        if rapport.inclure_objectifs:
            elements.append(Paragraph("üéØ Objectifs et Progr√®s", self.styles[config['subtitle_style']]))
            elements.append(Spacer(1, 12))
            
            # Sample goals data
            objectifs_data = [
                ["Objectif", "Progression", "Statut", "√âch√©ance"],
                ["√âcrire 3 fois par semaine", "75%", "üìà En bonne voie", "30 jours"],
                ["Apprendre Django avanc√©", "40%", "üìö En progression", "60 jours"], 
                ["Am√©liorer la routine matinale", "60%", "üåÖ Continue les efforts", "30 jours"],
                ["Lire 2 livres par mois", "25%", "üìñ √Ä intensifier", "45 jours"]
            ]
            
            objectifs_table = Table(objectifs_data, colWidths=[180, 80, 100, 80])
            objectifs_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor(config['primary_color'])),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#F8F9FA')),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#DEE2E6')),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#F8F9FA')])
            ]))
            elements.append(objectifs_table)
            elements.append(Spacer(1, 20))
            
            # Analyse des objectifs
            elements.append(Paragraph("üìã Analyse des Objectifs", self.styles[config['subtitle_style']]))
            elements.append(Spacer(1, 8))
            
            analysis_points = [
                "‚úÖ 2 objectifs sur 4 sont en bonne voie",
                "üìä Progression moyenne: 50%",
                "üéØ Objectif le plus avanc√©: Routine d'√©criture",
                "üí™ Objectif √† renforcer: Lecture mensuelle"
            ]
            
            analysis_list = []
            for point in analysis_points:
                analysis_list.append(ListItem(Paragraph(point, self.styles['Normal'])))
            
            elements.append(ListFlowable(analysis_list, bulletType='bullet'))
            elements.append(Spacer(1, 20))
        else:
            elements.append(Paragraph("üéØ Objectifs", self.styles[config['subtitle_style']]))
            elements.append(Paragraph("<i>Les objectifs ne sont pas inclus dans ce rapport</i>", self.styles['Italic']))
            elements.append(Spacer(1, 20))

        return elements

    def _generate_recommandations_section(self, rapport, config):
        """Generate recommendations section - ONLY if enabled"""
        elements = []
        
        # ‚úÖ CHECK IF RECOMMENDATIONS ARE ENABLED
        if rapport.inclure_recommandations:
            elements.append(Paragraph("üí° Recommandations Personnalis√©es", self.styles[config['subtitle_style']]))
            elements.append(Spacer(1, 12))
            
            recommendations = self._generate_recommendations(rapport)
            rec_list = []
            for rec in recommendations:
                rec_list.append(ListItem(Paragraph(rec, self.styles['Normal'])))
            
            elements.append(ListFlowable(rec_list, bulletType='bullet'))
            elements.append(Spacer(1, 20))
        else:
            elements.append(Paragraph("üí° Recommandations", self.styles[config['subtitle_style']]))
            elements.append(Paragraph("<i>Les recommandations ne sont pas incluses dans ce rapport</i>", self.styles['Italic']))
            elements.append(Spacer(1, 20))

        return elements

    def _get_frequency_analysis(self, frequency):
        """Analyze writing frequency"""
        if frequency >= 20:
            return "Tr√®s r√©gulier üéâ"
        elif frequency >= 10:
            return "R√©gulier üëç"
        elif frequency >= 5:
            return "Mod√©r√© üìä"
        else:
            return "√Ä am√©liorer üí™"

    def _get_mood_analysis(self, mood_score):
        """Analyze mood score"""
        if mood_score >= 8:
            return "Excellente humeur üòä"
        elif mood_score >= 6:
            return "Bonne humeur üôÇ"
        elif mood_score >= 4:
            return "Humeur neutre üòê"
        else:
            return "Humeur basse üòî"

    def _calculate_consistency(self, statistique):
        """Calculate writing consistency"""
        base_consistency = min(100, (statistique.frequence_ecriture / 30) * 100)
        return base_consistency

    def _calculate_productivity(self, statistique):
        """Calculate productivity score"""
        base_productivity = min(10, (statistique.frequence_ecriture / 3) + (statistique.score_humeur / 2))
        return base_productivity

    def generate_complete_report(self, rapport):
        """Generate a complete monthly report that RESPECTS all inclusion settings"""
        try:
            buffer = BytesIO()
            config = self._get_template_config(rapport.template_rapport)
            
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=72
            )
            story = []

            # === PAGE DE COUVERTURE ===
            story.append(Paragraph(rapport.titre, self.styles[config['title_style']]))
            story.append(Spacer(1, 10))
            story.append(Paragraph(f"P√©riode: {rapport.mois}", self.styles['Heading3']))
            story.append(Spacer(1, 30))

            # Informations utilisateur
            user_data = [
                ["üë§ Informations Personnelles", ""],
                ["Utilisateur:", f"{rapport.utilisateur.username}"],
                ["Email:", f"{rapport.utilisateur.email}"],
                ["P√©riode:", f"{rapport.mois}"],
                ["Date de g√©n√©ration:", f"{datetime.now().strftime('%d/%m/%Y √† %H:%M')}"],
                ["Template:", f"{rapport.get_template_rapport_display()}"],
            ]
            
            user_table = Table(user_data, colWidths=[150, 300])
            user_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor(config['primary_color'])),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#F8F9FA')),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#DEE2E6'))
            ]))
            story.append(user_table)
            story.append(Spacer(1, 30))

            # === ALL SECTIONS - RESPECTING INCLUSION SETTINGS ===
            
            # 1. Statistiques (if enabled)
            story.extend(self._generate_statistics_section(rapport, config))
            
            # 2. Graphiques (if enabled)  
            story.extend(self._generate_graphiques_section(rapport, config))
            
            # 3. Analyse IA (if enabled)
            story.extend(self._generate_analyse_ia_section(rapport, config))
            
            # 4. Journaux (if enabled)
            story.extend(self._generate_journaux_section(rapport, config))
            
            # 5. Objectifs (if enabled)
            story.extend(self._generate_objectifs_section(rapport, config))
            
            # 6. Recommandations (if enabled)
            story.extend(self._generate_recommandations_section(rapport, config))

            # === R√âSUM√â EX√âCUTIF ===
            story.append(Paragraph("üéØ R√©sum√© Ex√©cutif", self.styles[config['subtitle_style']]))
            story.append(Spacer(1, 8))
            
            executive_summary = self._generate_executive_summary(rapport)
            story.append(Paragraph(executive_summary, self.styles['Normal']))
            story.append(Spacer(1, 30))

            # === PIED DE PAGE ===
            footer_text = f"Rapport g√©n√©r√© par MindScribe ‚Ä¢ {datetime.now().strftime('%d/%m/%Y √† %H:%M')} ‚Ä¢ Confidential"
            story.append(Paragraph(footer_text, ParagraphStyle(
                name='Footer',
                fontSize=8,
                textColor=colors.gray,
                alignment=1
            )))

            doc.build(story)
            pdf_content = buffer.getvalue()
            buffer.close()
            
            return pdf_content
            
        except Exception as e:
            logger.error(f"Error generating PDF report: {str(e)}")
            raise

    def _generate_recommendations(self, rapport):
        """Generate personalized recommendations"""
        recommendations = []
        
        if hasattr(rapport, 'statistique'):
            statistique = rapport.statistique
            
            # Recommandations bas√©es sur la fr√©quence
            if statistique.frequence_ecriture < 10:
                recommendations.append("üìù Essayez d'√©crire plus r√©guli√®rement (3-4 fois par semaine) pour mieux suivre votre √©volution")
            elif statistique.frequence_ecriture > 20:
                recommendations.append("üéâ Excellente r√©gularit√©! Continuez √† maintenir ce rythme d'√©criture")
            else:
                recommendations.append("üëç Bonne fr√©quence d'√©criture, vous avez trouv√© un bon √©quilibre")
            
            # Recommandations bas√©es sur l'humeur
            if statistique.score_humeur < 5:
                recommendations.append("üòä Pratiquez la gratitude quotidienne et les exercices de respiration pour am√©liorer votre humeur")
            elif statistique.score_humeur > 8:
                recommendations.append("üåà Humeur excellente! Profitez-en pour explorer de nouveaux sujets cr√©atifs")
            else:
                recommendations.append("üí™ Humeur stable, continuez vos pratiques de bien-√™tre actuelles")
            
            # Recommandations g√©n√©rales
            recommendations.append("üîç Utilisez les analyses pour identifier vos patterns d'√©criture et vos moments les plus productifs")
            recommendations.append("üéØ Fixez-vous des objectifs mensuels r√©alisables pour rester motiv√© et mesurer vos progr√®s")
            recommendations.append("üìä Revoyez r√©guli√®rement vos statistiques pour ajuster vos habitudes d'√©criture")
        
        # Recommandations suppl√©mentaires
        recommendations.append("üåô Essayez d'√©crire √† diff√©rents moments de la journ√©e pour d√©couvrir vos p√©riodes les plus cr√©atives")
        recommendations.append("üí≠ Notez vos r√™ves et id√©es spontan√©es pour enrichir votre pratique d'√©criture")
        
        return recommendations

    def _generate_executive_summary(self, rapport):
        """Generate executive summary"""
        summary_parts = []
        
        if hasattr(rapport, 'statistique'):
            statistique = rapport.statistique
            
            summary_parts.append(f"Ce rapport couvre la p√©riode de {rapport.mois}. ")
            summary_parts.append(f"Vous avez √©crit {statistique.frequence_ecriture} entr√©es avec un score d'humeur moyen de {statistique.score_humeur:.1f}/10. ")
            summary_parts.append(f"Votre consistance d'√©criture est de {self._calculate_consistency(statistique):.1f}% et votre niveau de productivit√© est √©valu√© √† {self._calculate_productivity(statistique):.1f}/10.")
            
            if statistique.themes_dominants:
                summary_parts.append(f" Les th√®mes dominants de cette p√©riode sont: {', '.join(statistique.themes_dominants[:3])}.")
        
        # Ajouter des informations sur les sections incluses
        included_sections = []
        if rapport.inclure_statistiques:
            included_sections.append("statistiques")
        if rapport.inclure_graphiques:
            included_sections.append("graphiques")
        if rapport.inclure_analyse_ia:
            included_sections.append("analyse IA")
        if rapport.inclure_journaux:
            included_sections.append("extraits de journal")
        if rapport.inclure_objectifs:
            included_sections.append("objectifs")
        if rapport.inclure_recommandations:
            included_sections.append("recommandations")
            
        if included_sections:
            summary_parts.append(f" Ce rapport inclut: {', '.join(included_sections)}.")
        
        return "".join(summary_parts)